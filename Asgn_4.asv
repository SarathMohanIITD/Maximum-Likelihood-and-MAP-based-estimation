
SNR = [0.1,0.5,1,2,5,10,20,30,40];  % SNR loop for plotting BER

% Request for number of bits
option = input('Choose the number of bits to transfer \n 1  >>> 10^3 \n 2  >>> 10^4\n 3 >>> 10^6\n ------ ');
% Request for which receiver design to implement
algo = input('Enter the demodulation scheme\n   1.  ML detection\n   2.   MAP detection   -----> ');

if algo ==1
    px0=input('Enter the prior prob of x=0 ---> ');
end

if option ==1
    N = 10^3;
elseif option ==2
    N = 10^4;
else
    N = 10^6;
end

tx = randi([0,1],N,1); % Binary input vector
bpsk_tx= 2*tx - 1;      % BPSK modulation

for i = 1:length(SNR)
    
    NP = 10^(-0.1*SNR(i));  % Finding noise power from given SNR
    
    % AWGN noise
    noise = NP*randn(N,1);      
    y_awgn = bpsk_tx + noise; 

    % Frequency flat
    h = 0.8;
    y_flat = bpsk_tx*h + noise;

    %--------  Receiver ----------------

    %  Performing ML detection 
    if(algo ==1)
        
       y_ML_awgn_demod = ML_demod(y_awgn);
       y_ML_flat_demod = ML_demod(y_flat);
       ML_biterr_awgn(i) = bit_err(y_ML_awgn_demod,tx);
       ML_biterr_flat(i) = bit_err(y_ML_flat_demod,tx);
       
    % Performing MAP detection
    else 
       y_MAP_awgn_demod = MAP_demod(y_awgn,px0,NP);  %MAP demod function 
       y_MAP_flat_demod = MAP_demod(y_flat,px0,NP);
       MAP_biterr_awgn(i) = bit_err(y_ML_awgn_demod,tx);
       MAP_biterr_flat(i) = bit_err(y_ML_flat_demod,tx);         
    end
end

disp(biterr_awgn);
disp(biterr_flat);
plot(SNR,biterr_awgn);
plot(SNR,biterr_flat);


    

% ------- Maximum Likelihood demodulation  --------
function demod = ML_demod(bits)
    demod=[];
    for i = 1:size(bits)
       if bits(i)<0
           demod=[demod;0];
       else
           demod=[demod;1];
       end
    end
end

%--------   Maximum Aposteriori Probability Receiver  --------------------

function demod = MAP_demod(bits,px0,NP)
    demod=[];
    for i = 1:size(bits)
        if 4*bits(i) <= -2*NP*log((1-px0)/px0)
           demod=[demod;0];
        else
            demod = [demod;1];   
        end
    end
end


% Bit error rate calculation

function error = bit_err( y ,x)
    error =0;
    for i = 1:size(y)
        if y(i)~= x(i)
            error=error+1;
        end
    end
    error = error/size(y,1);
end




